@use 'sass:map';
@use 'sass:math';
@use '@material/textfield' as mdc-textfield;
@use '@material/density' as mdc-density;
@use '@angular/material' as mat;
@use '../../token-utils';
@use '../../../style/sass-utils';

// The prefix used to generate the fully qualified name for tokens in this file.
$prefix: (mtx, select);

// Generates the tokens used to theme the option based on a palette.
@function private-get-color-palette-color-tokens($theme, $palette-name) {
  @return (
    option-selected-state-text-color: mat.get-theme-color($theme, $palette-name),
  );
}

// Tokens that can't be configured through Angular Material's current theming API,
// but may be in a future version of the theming API.
@function get-unthemable-tokens() {
  @return ();
}

// Tokens that can be configured through Angular Material's color theming API.
@function get-color-tokens($theme) {
  $text-color: mat.get-theme-color($theme, foreground, text);
  $hint-text-color: mat.get-theme-color($theme, foreground, hint-text);
  $secondary-text-color: mat.get-theme-color($theme, foreground, secondary-text);
  $disabled-text-color: mat.get-theme-color($theme, foreground, disabled-text);
  $divider-color: mat.get-theme-color($theme, foreground, divider);
  $hover-color: mat.get-theme-color($theme, background, hover);
  $palette-tokens: private-get-color-palette-color-tokens($theme, primary);

  @return map.merge($palette-tokens, (
    container-text-color: $text-color,
    placeholder-text-color: $hint-text-color,
    disabled-text-color: $hint-text-color,

    multiple-value-background-color: mat.get-theme-color($theme, background, unselected-chip),
    multiple-value-border-color: $divider-color,
    multiple-value-icon-hover-background-color: $divider-color,

    clear-icon-color: $secondary-text-color,
    clear-icon-hover-color: mat.get-theme-color($theme, warn),

    enabled-arrow-color: $secondary-text-color,
    disabled-arrow-color: $disabled-text-color,
    invalid-arrow-color: mat.get-theme-color($theme, warn),

    panel-background-color: mat.get-theme-color($theme, background, card),
    panel-divider-color: $divider-color,
    optgroup-label-text-color: $secondary-text-color,
    option-label-text-color: $text-color,
    option-selected-state-background-color: $hover-color,
    option-hover-state-background-color: $hover-color,
    option-disabled-state-text-color: $hint-text-color,
  ));
}

// Tokens that can be configured through Angular Material's typography theming API.
@function get-typography-tokens($theme) {
  @return ();
}

// Tokens that can be configured through Angular Material's density theming API.
@function get-density-tokens($theme) {
  $density-scale: mat.private-clamp-density(mat.get-theme-density($theme), -4);
  $height: mdc-density.prop-value(
    $density-config: mdc-textfield.$density-config,
    $density-scale: mat.get-theme-density($theme),
    $property-name: height,
  );
  $hide-label: $height < mdc-textfield.$minimum-height-for-filled-label;

  // We computed the desired height of the form-field using the density configuration. The
  // spec only describes vertical spacing/alignment in non-dense mode. This means that we
  // cannot update the spacing to explicit numbers based on the density scale. Instead, we
  // determine the height reduction and equally subtract it from the default `top` and `bottom`
  // padding that is provided by the Material Design specification.
  $vertical-deduction: math.div(mdc-textfield.$height - $height, 2);

  // Note: these calculations are trivial enough that we could do them at runtime with `calc`
  // and the value of the `height` token. The problem is that because we need to hide the label
  // if the container becomes too short, we have to change the padding calculation. This is
  // complicated further by the fact that filled form fields without labels have the same
  // vertical padding as outlined ones. Alternatives:
  // 1. Using container queries to hide the label and change the padding - this doesn't work
  // because size container queries require setting the `container-type` property which breaks
  // the form field layout. We could use style queries, but they're only supported in Chrome.
  // 2. Monitoring the size of the label - we already have a `ResizeObserver` on the label so we
  // could reuse it to also check when it becomes `display: none`. This would allows us to remove
  // the three padding tokens. We don't do it, because it would require us to always set up
  // the resize observer, as opposed to currently where it's only set up for outlined form fields.
  // This may lead to performance regressions.
  // 3. Conditionally adding `::before` and `::after` to the infix with positive and negative
  // margin respectively - this works, but is likely to break a lot of overrides that are targeting
  // a specific padding. It also runs the risk of overflowing the container.
  // TODO: switch the padding tokens to style-based container queries
  // when they become available in all the browsers we support.
  $filled-with-label-padding: 24px - $vertical-deduction;
  $filled-with-label-padding-bottom: 8px - $vertical-deduction;
  $vertical-padding: 16px - $vertical-deduction;

  @return (
    vertical-padding: $vertical-padding,
    filled-padding-top: if($hide-label, $vertical-padding, $filled-with-label-padding),
    filled-padding-bottom: if($hide-label, $vertical-padding, $filled-with-label-padding-bottom),
  );
}

// Combines the tokens generated by the above functions into a single map with placeholder values.
// This is used to create token slots.
@function get-token-slots() {
  @return sass-utils.deep-merge-all(
    get-unthemable-tokens(),
    get-color-tokens(token-utils.$placeholder-color-config),
    get-typography-tokens(token-utils.$placeholder-typography-config),
    get-density-tokens(token-utils.$placeholder-density-config)
  );
}
